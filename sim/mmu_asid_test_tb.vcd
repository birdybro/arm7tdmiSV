$date
	Fri Jul 25 08:12:26 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module mmu_asid_test_tb $end
$var wire 32 ! tlb_misses [31:0] $end
$var wire 32 " tlb_hits [31:0] $end
$var wire 32 # page_faults [31:0] $end
$var wire 1 $ mmu_busy $end
$var wire 1 % mem_write $end
$var wire 32 & mem_wdata [31:0] $end
$var wire 2 ' mem_size [1:0] $end
$var wire 1 ( mem_req $end
$var wire 32 ) mem_paddr [31:0] $end
$var wire 1 * cpu_ready $end
$var wire 32 + cpu_rdata [31:0] $end
$var wire 1 , cpu_abort $end
$var wire 32 - asid_switches [31:0] $end
$var reg 1 . cache_enable $end
$var reg 1 / clk $end
$var reg 1 0 cpu_req $end
$var reg 2 1 cpu_size [1:0] $end
$var reg 32 2 cpu_vaddr [31:0] $end
$var reg 32 3 cpu_wdata [31:0] $end
$var reg 1 4 cpu_write $end
$var reg 8 5 current_asid [7:0] $end
$var reg 4 6 domain_access [3:0] $end
$var reg 1 7 mem_abort $end
$var reg 32 8 mem_rdata [31:0] $end
$var reg 1 9 mem_ready $end
$var reg 1 : mmu_enable $end
$var reg 1 ; rst_n $end
$var reg 32 < tlb_flush_addr [31:0] $end
$var reg 1 = tlb_flush_all $end
$var reg 1 > tlb_flush_asid $end
$var reg 8 ? tlb_flush_asid_val [7:0] $end
$var reg 1 @ tlb_flush_entry $end
$var reg 1 A tlb_flush_global $end
$var reg 32 B ttb_base [31:0] $end
$var integer 32 C test_count [31:0] $end
$var integer 32 D test_passed [31:0] $end
$var integer 32 E timeout [31:0] $end
$scope module u_mmu $end
$var wire 1 . cache_enable $end
$var wire 1 / clk $end
$var wire 1 , cpu_abort $end
$var wire 32 F cpu_rdata [31:0] $end
$var wire 1 * cpu_ready $end
$var wire 1 0 cpu_req $end
$var wire 2 G cpu_size [1:0] $end
$var wire 32 H cpu_vaddr [31:0] $end
$var wire 32 I cpu_wdata [31:0] $end
$var wire 1 4 cpu_write $end
$var wire 8 J current_asid [7:0] $end
$var wire 4 K domain_access [3:0] $end
$var wire 1 7 mem_abort $end
$var wire 32 L mem_rdata [31:0] $end
$var wire 1 9 mem_ready $end
$var wire 1 $ mmu_busy $end
$var wire 1 : mmu_enable $end
$var wire 1 ; rst_n $end
$var wire 32 M tlb_flush_addr [31:0] $end
$var wire 1 = tlb_flush_all $end
$var wire 1 > tlb_flush_asid $end
$var wire 8 N tlb_flush_asid_val [7:0] $end
$var wire 1 @ tlb_flush_entry $end
$var wire 1 A tlb_flush_global $end
$var wire 32 O ttb_base [31:0] $end
$var wire 12 P va_section_offset [11:0] $end
$var wire 20 Q va_section_index [19:0] $end
$var wire 8 R va_page_sub [7:0] $end
$var wire 12 S va_page_offset [11:0] $end
$var wire 20 T va_page_index [19:0] $end
$var wire 32 U l2_addr [31:0] $end
$var wire 32 V l1_addr [31:0] $end
$var wire 32 W final_paddr [31:0] $end
$var wire 1 X asid_changed $end
$var reg 32 Y asid_switches [31:0] $end
$var reg 1 Z domain_ok $end
$var reg 32 [ l1_pte [31:0] $end
$var reg 32 \ l2_pte [31:0] $end
$var reg 32 ] mem_paddr [31:0] $end
$var reg 1 ( mem_req $end
$var reg 2 ^ mem_size [1:0] $end
$var reg 32 _ mem_wdata [31:0] $end
$var reg 1 % mem_write $end
$var reg 3 ` next_state [2:0] $end
$var reg 32 a page_faults [31:0] $end
$var reg 1 b permission_ok $end
$var reg 8 c prev_asid [7:0] $end
$var reg 3 d state [2:0] $end
$var reg 1 e tlb_hit $end
$var reg 5 f tlb_hit_index [4:0] $end
$var reg 32 g tlb_hits [31:0] $end
$var reg 32 h tlb_misses [31:0] $end
$var reg 5 i tlb_next_replace [4:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 j i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 k i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 l i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 m i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop4 $end
$var integer 32 n i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop5 $end
$var integer 32 o i [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop10 $end
$var integer 32 p i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 q i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 r i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 s i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop9 $end
$var integer 32 t i [31:0] $end
$upscope $end
$scope task change_asid $end
$var reg 8 u new_asid [7:0] $end
$upscope $end
$scope task flush_tlb_all $end
$upscope $end
$scope task flush_tlb_asid $end
$var reg 8 v asid_val [7:0] $end
$upscope $end
$scope task memory_access $end
$var reg 1 w expect_fault $end
$var reg 32 x expected_paddr [31:0] $end
$var reg 32 y vaddr [31:0] $end
$var reg 32 z wdata [31:0] $end
$var reg 1 { write $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x{
bx z
bx y
bx x
xw
bx v
bx u
b1000000000000 t
b10000000000 s
b1000000000000 r
b10000000000000000 q
b10000000000 p
b0 o
b0 n
b0 m
b0 l
b100000 k
b100000 j
b0 i
b0 h
b0 g
b0 f
0e
b0 d
b0 c
0b
b0 a
b0 `
b0 _
b10 ^
b0 ]
bx \
bx [
0Z
b0 Y
1X
b0 W
b10000000000000000 V
bx0000000000 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b10000000000000000 O
b0 N
b0 M
b0 L
b1 K
b1 J
b0 I
b0 H
b10 G
b0 F
b0 E
b0 D
b0 C
b10000000000000000 B
0A
0@
b0 ?
0>
0=
b0 <
0;
1:
19
b0 8
07
b1 6
b1 5
04
b0 3
b0 2
b10 1
00
0/
1.
b0 -
0,
b0 +
1*
b0 )
0(
b10 '
b0 &
0%
0$
b0 #
b0 "
b0 !
$end
#5000
b100000 k
1/
#10000
0/
#15000
b100000 k
1/
#20000
0/
#25000
b100000 k
1/
#30000
0/
#35000
b100000 k
1/
#40000
0/
#45000
b1 -
b1 Y
0X
b1 c
1;
1/
#50000
0/
#55000
1/
#60000
0/
#65000
1/
#70000
0/
#75000
1/
#80000
0/
#85000
1/
#90000
0/
#95000
0*
b100000 j
b1 `
b1000000000000000001000000000000 )
b1000000000000000001000000000000 ]
b10001000000000000 V
b10000000000 Q
b10000 P
b1000000000000000001 T
bx0000000100 U
b1 R
b1000000000000000001000000000000 W
10
b1000000000000000001000000000000 2
b1000000000000000001000000000000 H
b1 C
0w
b10000000000000000001000000000000 x
b0 z
0{
b1000000000000000001000000000000 y
1/
#100000
0/
#105000
1$
b1 d
0*
b100000 j
b10 `
00
1/
#110000
0/
#115000
1(
b1 !
b1 h
b10 d
b100000 j
b101 `
b10001010000000000 )
b10001010000000000 ]
b10001010000000000 V
b10100000000 Q
b0 P
b1010000000000000000 T
bx0000000000 U
b0 R
b1010000000000000000000000000000 W
10
b1010000000000000000000000000000 2
b1010000000000000000000000000000 H
b10 C
b10010000000000000000000000000000 x
b1010000000000000000000000000000 y
1/
#120000
0/
#125000
b1010000000000000000000000000000 )
b1010000000000000000000000000000 ]
0(
1,
b100000 j
b0 U
b100000000000000001 +
b100000000000000001 F
b100000000000000001 8
b100000000000000001 L
b101 d
b0 [
b1 E
1/
#130000
0/
#135000
b1 #
b1 a
b10 E
1/
#140000
0/
#145000
b10 #
b10 a
b100000 j
b0 `
00
1/
#150000
0/
#155000
0,
0$
b11 #
b11 a
b0 d
b100000 j
b1 `
b1010000000000000001000000000000 )
b1010000000000000001000000000000 ]
b10000 P
b1010000000000000001 T
b100 U
b1 R
b1010000000000000001000000000000 W
b0 E
10
b1010000000000000001000000000000 2
b1010000000000000001000000000000 H
b11 C
b10010000000000000001000000000000 x
b1010000000000000001000000000000 y
1/
#160000
0/
#165000
1$
b1 d
0*
b100000 j
b10 `
00
1/
#170000
0/
#175000
b10001010000000000 )
b10001010000000000 ]
1(
b101 `
b10 !
b10 h
b10 -
b10 Y
b10 c
b10 d
b100000 j
0X
b10 5
b10 J
b100 C
b10 u
1/
#180000
0/
#185000
1,
b101 d
b100000000000000001 [
b100000 j
b101 `
b1000000000000000010000000000000 )
b1000000000000000010000000000000 ]
0(
b10001000000000000 V
b10000000000 Q
b100000 P
b1000000000000000010 T
b100000000000001000 U
b10 R
b1000000000000000010000000000000 W
10
b1000000000000000010000000000000 2
b1000000000000000010000000000000 H
b101 C
b10000000000000000010000000000000 x
b1000000000000000010000000000000 y
b1 D
1/
#190000
0/
#195000
b100 #
b100 a
b1 E
1/
#200000
0/
#205000
b101 #
b101 a
b100000 j
b0 `
00
1/
#210000
0/
#215000
0,
0$
b110 #
b110 a
b0 d
b100000 j
b1 `
b1010000000000000001000000000000 )
b1010000000000000001000000000000 ]
b10001010000000000 V
b10100000000 Q
b10000 P
b1010000000000000001 T
b100000000000000100 U
b1 R
b1010000000000000001000000000000 W
b0 E
10
b1010000000000000001000000000000 2
b1010000000000000001000000000000 H
b110 C
b10010000000000000001000000000000 x
b1010000000000000001000000000000 y
1/
#220000
0/
#225000
1$
b1 d
0*
b100000 j
b10 `
00
1/
#230000
0/
#235000
1(
b11 !
b11 h
b10 d
b100000 j
b11 `
b10001010000000000 )
b10001010000000000 ]
b0 P
b1010000000000000000 T
b100000000000000000 U
b0 R
b101000000000000000000000000000