$date
	Fri Jul 25 11:43:34 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module block_user_mode_test_tb $end
$var wire 1 ! decode_valid $end
$var wire 1 " decode_set_flags $end
$var wire 4 # decode_rn [3:0] $end
$var wire 4 $ decode_rm [3:0] $end
$var wire 4 % decode_rd [3:0] $end
$var wire 32 & decode_pc [31:0] $end
$var wire 1 ' decode_mem_writeback $end
$var wire 1 ( decode_mem_up $end
$var wire 1 ) decode_mem_pre $end
$var wire 1 * decode_mem_load $end
$var wire 1 + decode_mem_byte $end
$var wire 1 , decode_is_memory $end
$var wire 4 - decode_instr_type [3:0] $end
$var wire 12 . decode_immediate [11:0] $end
$var wire 1 / decode_imm_en $end
$var wire 4 0 decode_condition [3:0] $end
$var wire 4 1 decode_alu_op [3:0] $end
$var wire 1 2 actual_user_mode $end
$var reg 1 3 clk $end
$var reg 1 4 expected_user_mode $end
$var reg 1 5 flush $end
$var reg 1 6 instr_valid $end
$var reg 32 7 instruction [31:0] $end
$var reg 32 8 pc_in [31:0] $end
$var reg 1 9 rst_n $end
$var reg 1 : stall $end
$var reg 1 ; test_passed $end
$var reg 1 < thumb_mode $end
$var integer 32 = tests_passed [31:0] $end
$var integer 32 > tests_run [31:0] $end
$scope module u_decode $end
$var wire 1 ? branch_link $end
$var wire 24 @ branch_offset [23:0] $end
$var wire 1 3 clk $end
$var wire 4 A condition [3:0] $end
$var wire 1 ! decode_valid $end
$var wire 1 5 flush $end
$var wire 1 / imm_en $end
$var wire 12 B immediate [11:0] $end
$var wire 1 6 instr_valid $end
$var wire 32 C instruction [31:0] $end
$var wire 1 , is_memory $end
$var wire 1 + mem_byte $end
$var wire 1 * mem_load $end
$var wire 1 ) mem_pre $end
$var wire 1 ( mem_up $end
$var wire 1 ' mem_writeback $end
$var wire 32 D pc_in [31:0] $end
$var wire 32 E pc_out [31:0] $end
$var wire 1 F psr_immediate $end
$var wire 1 G psr_spsr $end
$var wire 1 H psr_to_reg $end
$var wire 4 I rd [3:0] $end
$var wire 4 J rm [3:0] $end
$var wire 4 K rn [3:0] $end
$var wire 1 9 rst_n $end
$var wire 1 " set_flags $end
$var wire 1 L shift_reg $end
$var wire 2 M shift_type [1:0] $end
$var wire 1 : stall $end
$var wire 1 < thumb_mode $end
$var wire 1 N w_bit $end
$var wire 1 O u_bit $end
$var wire 2 P shift_type_field [1:0] $end
$var wire 4 Q shift_rs [3:0] $end
$var wire 5 R shift_amt_field [4:0] $end
$var wire 5 S shift_amount [4:0] $end
$var wire 1 T s_bit $end
$var wire 4 U rn_field [3:0] $end
$var wire 4 V rm_field [3:0] $end
$var wire 4 W rd_field [3:0] $end
$var wire 1 X p_bit $end
$var wire 6 Y op_code [5:0] $end
$var wire 2 Z op_class [1:0] $end
$var wire 1 [ l_bit_mem $end
$var wire 1 \ l_bit $end
$var wire 1 ] is_branch $end
$var wire 12 ^ imm_field [11:0] $end
$var wire 1 _ i_bit $end
$var wire 4 ` cond_field [3:0] $end
$var wire 24 a branch_offset_field [23:0] $end
$var wire 1 b b_bit $end
$var wire 4 c alu_op [3:0] $end
$var reg 1 d cp_load $end
$var reg 4 e cp_num [3:0] $end
$var reg 3 f cp_op [2:0] $end
$var reg 3 g cp_opcode1 [2:0] $end
$var reg 3 h cp_opcode2 [2:0] $end
$var reg 4 i cp_rd [3:0] $end
$var reg 4 j cp_rn [3:0] $end
$var reg 4 k instr_type [3:0] $end
$var reg 32 l pc_reg [31:0] $end
$var reg 5 m thumb_imm5 [4:0] $end
$var reg 8 n thumb_imm8 [7:0] $end
$var reg 5 o thumb_instr_type [4:0] $end
$var reg 11 p thumb_offset11 [10:0] $end
$var reg 8 q thumb_offset8 [7:0] $end
$var reg 3 r thumb_rd [2:0] $end
$var reg 3 s thumb_rn [2:0] $end
$var reg 3 t thumb_rs [2:0] $end
$var reg 1 u valid_reg $end
$upscope $end
$scope task test_block_transfer $end
$var reg 1 v expect_user_mode $end
$var reg 32 w instr [31:0] $end
$upscope $end
$scope task test_non_block_transfer $end
$var reg 32 x instr [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx x
bx w
xv
0u
b0 t
b0 s
b0 r
b0 q
b0 p
b1 o
b0 n
b0 m
b0 l
b111 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
0d
bx c
xb
bx a
bx `
x_
bx ^
0]
x\
x[
bx Z
bx Y
xX
bx W
bx V
bx U
xT
bx S
bx R
bx Q
bx P
xO
xN
bx M
0L
bx K
bx J
bx I
0H
0G
0F
b0 E
b1000000000000 D
bx C
bx B
bx A
bx @
0?
b0 >
b0 =
0<
x;
0:
09
b1000000000000 8
bx 7
16
05
x4
03
02
bx 1
bx 0
0/
bx .
b111 -
0,
x+
x*
x)
x(
x'
b0 &
bx %
bx $
bx #
0"
0!
$end
#5000
13
#10000
03
#15000
1!
1u
b1000000000000 &
b1000000000000 E
b1000000000000 l
19
13
#20000
03
#25000
13
#30000
03
#35000
1,
b0 S
b1000 -
b1000 k
b1110 0
b1110 A
b1110 `
b10 Z
0_
b10010 Y
1T
b0 #
b0 K
b0 U
b0 %
b0 I
b0 W
b1110 $
b1110 J
b1110 V
b1110 .
b1110 B
b1110 ^
b0 M
b0 P
b0 R
0\
b100100000000000000001110 @
b100100000000000000001110 a
0)
0X
1(
1O
0+
0b
0'
0N
1*
1[
b100 1
b100 c
b0 Q
04
b11101000100100000000000000001110 7
b11101000100100000000000000001110 C
b1 >
0v
b11101000100100000000000000001110 w
13
#40000
03
#45000
13
#50000
03
#55000
b1000 -
b1000 k
b100101 Y
0T
b1101 #
b1101 K
b1101 U
b100 %
b100 I
b100 W
b0 $
b0 J
b0 V
b110000 .
b110000 B
b110000 ^
b1 M
b1 P
1\
b1011010100000000110000 @
b1011010100000000110000 a
1)
1X
0(
0O
1'
1N
0*
0[
b1001 1
b1001 c
b11101001001011010100000000110000 7
b11101001001011010100000000110000 C
b10 >
b11101001001011010100000000110000 w
b1 =
1;
13
#60000
03
#65000
13
#70000
03
#75000
12
b1000 -
b1000 k
b11110 Y
1T
b0 #
b0 K
b0 U
b0 %
b0 I
b0 W
b1110 $
b1110 J
b1110 V
b1110 .
b1110 B
b1110 ^
b0 M
b0 P
0\
b111100000000000000001110 @
b111100000000000000001110 a
0)
0X
1(
1O
1+
1b
1*
1[
b111 1
b111 c
14
b11101000111100000000000000001110 7
b11101000111100000000000000001110 C
b11 >
1v
b11101000111100000000000000001110 w
b10 =
13
#80000
03
#85000
13
#90000
03
#95000
b1000 -
b1000 k
b101101 Y
0T
b1101 #
b1101 K
b1101 U
b100 %
b100 I
b100 W
b0 $
b0 J
b0 V
b110000 .
b110000 B
b110000 ^
b1 M
b1 P
1\
b11011010100000000110000 @
b11011010100000000110000 a
1)
1X
0(
0O
0*
0[
b1011 1
b1011 c
b11101001011011010100000000110000 7
b11101001011011010100000000110000 C
b100 >
b11101001011011010100000000110000 w
b11 =
13
#100000
03
#105000
13
#110000
03
#115000
1/
1,
02
b110 -
b110 k
b1 0
b1 A
b1 `
b1 Z
b0 Y
b0 #
b0 K
b0 U
b0 %
b0 I
b0 W
b1110 $
b1110 J
b1110 V
b11110 .
b11110 B
b11110 ^
b0 M
b0 P
0\
b11110 @
b11110 a
0)
0X
0+
0b
0'
0N
b0 1
b0 c
b10100000000000000000000011110 7
b10100000000000000000000011110 C
b101 >
b10100000000000000000000011110 x
b100 =
13
#120000
03
#125000
13
#130000
03
#135000
b110 -
b110 k
b1011110 .
b1011110 B
b1011110 ^
b10 M
b10 P
b1011110 @
b1011110 a
b10100000000000000000001011110 7
b10100000000000000000001011110 C
b110 >
b10100000000000000000001011110 x
b101 =
13
#140000
03
#145000
13
#150000
03
#155000
0/
0,
b1 S
b0 -
b0 k
b10 0
b10 A
b10 `
b0 Z
b1 #
b1 K
b1 U
b100 %
b100 I
b100 W
b10001110 .
b10001110 B
b10001110 ^
b0 M
b0 P
b1 R
b10100000010001110 @
b10100000010001110 a
b100000000000010100000010001110 7
b100000000000010100000010001110 C
b111 >
b100000000000010100000010001110 x
b110 =
13
#160000
03
#165000
13
#170000
03
#175000
b111 =
13
#180000
03
#185000
13
