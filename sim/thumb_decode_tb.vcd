$date
	Thu Jul 24 15:14:08 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module thumb_decode_tb $end
$var wire 3 ! thumb_rs [2:0] $end
$var wire 3 " thumb_rn [2:0] $end
$var wire 3 # thumb_rd [2:0] $end
$var wire 8 $ thumb_offset8 [7:0] $end
$var wire 11 % thumb_offset11 [10:0] $end
$var wire 4 & thumb_instr_type [3:0] $end
$var wire 8 ' thumb_imm8 [7:0] $end
$var wire 5 ( thumb_imm5 [4:0] $end
$var wire 2 ) shift_type [1:0] $end
$var wire 5 * shift_amount [4:0] $end
$var wire 1 + set_flags $end
$var wire 4 , rn [3:0] $end
$var wire 4 - rm [3:0] $end
$var wire 4 . rd [3:0] $end
$var wire 1 / psr_to_reg $end
$var wire 1 0 psr_spsr $end
$var wire 1 1 psr_immediate $end
$var wire 32 2 pc_out [31:0] $end
$var wire 1 3 mem_writeback $end
$var wire 1 4 mem_up $end
$var wire 1 5 mem_pre $end
$var wire 1 6 mem_load $end
$var wire 1 7 mem_byte $end
$var wire 1 8 is_memory $end
$var wire 1 9 is_branch $end
$var wire 4 : instr_type [3:0] $end
$var wire 12 ; immediate [11:0] $end
$var wire 1 < imm_en $end
$var wire 1 = decode_valid $end
$var wire 4 > cp_rn [3:0] $end
$var wire 4 ? cp_rd [3:0] $end
$var wire 3 @ cp_opcode2 [2:0] $end
$var wire 3 A cp_opcode1 [2:0] $end
$var wire 3 B cp_op [2:0] $end
$var wire 4 C cp_num [3:0] $end
$var wire 1 D cp_load $end
$var wire 4 E condition [3:0] $end
$var wire 24 F branch_offset [23:0] $end
$var wire 1 G branch_link $end
$var wire 4 H alu_op [3:0] $end
$var reg 1 I clk $end
$var reg 1 J flush $end
$var reg 1 K instr_valid $end
$var reg 32 L instruction [31:0] $end
$var reg 32 M pc_in [31:0] $end
$var reg 1 N rst_n $end
$var reg 1 O stall $end
$var reg 1 P thumb_mode $end
$scope module u_decode $end
$var wire 1 G branch_link $end
$var wire 24 Q branch_offset [23:0] $end
$var wire 1 I clk $end
$var wire 4 R condition [3:0] $end
$var wire 1 = decode_valid $end
$var wire 1 J flush $end
$var wire 1 < imm_en $end
$var wire 12 S immediate [11:0] $end
$var wire 1 K instr_valid $end
$var wire 32 T instruction [31:0] $end
$var wire 1 8 is_memory $end
$var wire 1 7 mem_byte $end
$var wire 1 6 mem_load $end
$var wire 1 5 mem_pre $end
$var wire 1 4 mem_up $end
$var wire 1 3 mem_writeback $end
$var wire 32 U pc_in [31:0] $end
$var wire 32 V pc_out [31:0] $end
$var wire 1 1 psr_immediate $end
$var wire 1 0 psr_spsr $end
$var wire 1 / psr_to_reg $end
$var wire 4 W rd [3:0] $end
$var wire 4 X rm [3:0] $end
$var wire 4 Y rn [3:0] $end
$var wire 1 N rst_n $end
$var wire 1 + set_flags $end
$var wire 1 Z shift_reg $end
$var wire 2 [ shift_type [1:0] $end
$var wire 1 O stall $end
$var wire 1 P thumb_mode $end
$var wire 1 \ w_bit $end
$var wire 1 ] u_bit $end
$var wire 2 ^ shift_type_field [1:0] $end
$var wire 4 _ shift_rs [3:0] $end
$var wire 5 ` shift_amt_field [4:0] $end
$var wire 5 a shift_amount [4:0] $end
$var wire 1 b s_bit $end
$var wire 4 c rn_field [3:0] $end
$var wire 4 d rm_field [3:0] $end
$var wire 4 e rd_field [3:0] $end
$var wire 1 f p_bit $end
$var wire 6 g op_code [5:0] $end
$var wire 2 h op_class [1:0] $end
$var wire 1 i l_bit_mem $end
$var wire 1 j l_bit $end
$var wire 1 9 is_branch $end
$var wire 12 k imm_field [11:0] $end
$var wire 1 l i_bit $end
$var wire 4 m cond_field [3:0] $end
$var wire 24 n branch_offset_field [23:0] $end
$var wire 1 o b_bit $end
$var wire 4 p alu_op [3:0] $end
$var reg 1 D cp_load $end
$var reg 4 q cp_num [3:0] $end
$var reg 3 r cp_op [2:0] $end
$var reg 3 s cp_opcode1 [2:0] $end
$var reg 3 t cp_opcode2 [2:0] $end
$var reg 4 u cp_rd [3:0] $end
$var reg 4 v cp_rn [3:0] $end
$var reg 4 w instr_type [3:0] $end
$var reg 32 x pc_reg [31:0] $end
$var reg 5 y thumb_imm5 [4:0] $end
$var reg 8 z thumb_imm8 [7:0] $end
$var reg 4 { thumb_instr_type [3:0] $end
$var reg 11 | thumb_offset11 [10:0] $end
$var reg 8 } thumb_offset8 [7:0] $end
$var reg 3 ~ thumb_rd [2:0] $end
$var reg 3 !" thumb_rn [2:0] $end
$var reg 3 "" thumb_rs [2:0] $end
$var reg 1 #" valid_reg $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0#"
bx ""
bx !"
bx ~
b0 }
b0 |
b1 {
b0 z
b0 y
b0 x
b111 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
bx p
xo
bx n
bx m
xl
bx k
xj
xi
bx h
bx g
xf
bx e
bx d
bx c
xb
bx a
bx `
bx _
bx ^
x]
x\
bx [
0Z
bx Y
bx X
bx W
b0 V
b0 U
bx T
bx S
bx R
bx Q
1P
0O
0N
b0 M
bx L
1K
0J
0I
bx H
0G
bx F
bx E
0D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
0=
0<
bx ;
b111 :
09
08
x7
x6
x5
x4
x3
b0 2
01
00
0/
bx .
bx -
bx ,
0+
bx *
bx )
b0 (
b0 '
b1 &
b0 %
b0 $
bx #
bx "
bx !
$end
#5000
1I
#10000
0I
#15000
1=
1#"
1N
1I
#20000
0I
#25000
b10 *
b10 a
b101 (
b101 y
b10 &
b10 {
b101 "
b101 !"
b1 !
b1 ""
b0 #
b0 ~
b0 :
b0 w
b0 E
b0 R
b0 m
b0 h
0l
b0 g
0b
b0 ,
b0 Y
b0 c
b0 .
b0 W
b0 e
b1000 -
b1000 X
b1000 d
b101001000 ;
b101001000 S
b101001000 k
b10 )
b10 [
b10 ^
b10 `
0j
b101001000 F
b101001000 Q
b101001000 n
05
0f
04
0]
07
0o
03
0\
06
0i
b0 H
b0 p
b1 _
b101001000 L
b101001000 T
1I
#30000
0I
#35000
1I
#40000
0I
#45000
b100 *
b100 a
b1100100 '
b1100100 z
b10 #
b10 ~
b0 (
b0 y
b1 "
b1 !"
b100 !
b100 ""
b11 &
b11 {
b0 :
b0 w
b11 .
b11 W
b11 e
b100 -
b100 X
b100 d
b1001100100 ;
b1001100100 S
b1001100100 k
b11 )
b11 [
b11 ^
b100 `
b11001001100100 F
b11001001100100 Q
b11001001100100 n
b10 _
b11001001100100 L
b11001001100100 T
1I
#50000
0I
#55000
1I
#60000
0I
#65000
b1000 *
b1000 a
b0 '
b0 z
b0 "
b0 !"
b1 !
b1 ""
b0 #
b0 ~
b100 &
b100 {
b0 :
b0 w
b100 .
b100 W
b100 e
b1000 -
b1000 X
b1000 d
b10000001000 ;
b10000001000 S
b10000001000 k
b0 )
b0 [
b0 ^
b1000 `
b100010000001000 F
b100010000001000 Q
b100010000001000 n
b100 _
b100010000001000 L
b100010000001000 T
1I
#70000
0I
#75000
1I
#80000
0I
#85000
0Z
b10000 *
b10000 a
b110010 %
b110010 |
b10 #
b10 ~
b110 !
b110 ""
b1111 &
b1111 {
19
b1001 :
b1001 w
b1110 .
b1110 W
b1110 e
b10 -
b10 X
b10 d
b100000110010 ;
b100000110010 S
b100000110010 k
b1 )
b1 [
b1 ^
b10000 `
b1110100000110010 F
b1110100000110010 Q
b1110100000110010 n
b1000 _
b1110100000110010 L
b1110100000110010 T
1I
#90000
0I
#95000
1I
#100000
0I
#105000
18
b10100 *
b10100 a
b1 "
b1 !"
b0 %
b0 |
b100 !
b100 ""
b11 #
b11 ~
b110 &
b110 {
09
b110 :
b110 w
b110 .
b110 W
b110 e
b11 -
b11 X
b11 d
b101001100011 ;
b101001100011 S
b101001100011 k
b11 )
b11 [
b11 ^
b10100 `
b110101001100011 F
b110101001100011 Q
b110101001100011 n
b1010 _
b110101001100011 L
b110101001100011 T
1I
#110000
0I
#115000
1I
#120000
0I
#125000
1I
