$date
	Fri Jul 25 09:49:13 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cache_integrated_perf_test_tb $end
$var wire 32 ! perf_total_misses [31:0] $end
$var wire 32 " perf_total_hits [31:0] $end
$var wire 32 # perf_total_accesses [31:0] $end
$var wire 16 $ perf_hit_rate_percent [15:0] $end
$var wire 32 % perf_efficiency_metric [31:0] $end
$var wire 1 & monitor_active $end
$var wire 1 ' mem_write $end
$var wire 32 ( mem_wdata [31:0] $end
$var wire 1 ) mem_req $end
$var wire 4 * mem_byte_en [3:0] $end
$var wire 32 + mem_addr [31:0] $end
$var wire 1 , cpu_ready $end
$var wire 32 - cpu_rdata [31:0] $end
$var wire 1 . cpu_hit $end
$var wire 1 / counters_overflow $end
$var wire 32 0 cache_misses [31:0] $end
$var wire 32 1 cache_hits [31:0] $end
$var wire 32 2 cache_evictions [31:0] $end
$var wire 1 3 cache_busy $end
$var reg 1 4 cache_enable $end
$var reg 1 5 cache_flush $end
$var reg 1 6 clk $end
$var reg 32 7 cpu_addr [31:0] $end
$var reg 4 8 cpu_byte_en [3:0] $end
$var reg 1 9 cpu_req $end
$var reg 2 : cpu_size [1:0] $end
$var reg 32 ; cpu_wdata [31:0] $end
$var reg 1 < cpu_write $end
$var reg 32 = mem_rdata [31:0] $end
$var reg 1 > mem_ready $end
$var reg 1 ? perf_enable $end
$var reg 1 @ perf_reset $end
$var reg 4 A perf_sample_period [3:0] $end
$var reg 2 B replacement_select [1:0] $end
$var reg 1 C rst_n $end
$var integer 32 D test_count [31:0] $end
$var integer 32 E test_passed [31:0] $end
$scope module u_dcache $end
$var wire 1 3 cache_busy $end
$var wire 1 4 cache_enable $end
$var wire 1 5 cache_flush $end
$var wire 1 6 clk $end
$var wire 32 F coherency_addr [31:0] $end
$var wire 1 G coherency_ready $end
$var wire 1 H coherency_req $end
$var wire 1 I coherency_write $end
$var wire 32 J cpu_addr [31:0] $end
$var wire 4 K cpu_byte_en [3:0] $end
$var wire 1 . cpu_hit $end
$var wire 1 , cpu_ready $end
$var wire 1 9 cpu_req $end
$var wire 2 L cpu_size [1:0] $end
$var wire 32 M cpu_wdata [31:0] $end
$var wire 1 < cpu_write $end
$var wire 32 N mem_rdata [31:0] $end
$var wire 1 > mem_ready $end
$var wire 2 O replacement_select [1:0] $end
$var wire 1 C rst_n $end
$var wire 2 P word_offset [1:0] $end
$var wire 2 Q byte_offset [1:0] $end
$var wire 25 R addr_tag [24:0] $end
$var wire 4 S addr_offset [3:0] $end
$var wire 3 T addr_index [2:0] $end
$var reg 32 U cache_evictions [31:0] $end
$var reg 1 V cache_hit_internal $end
$var reg 32 W cache_hits [31:0] $end
$var reg 32 X cache_misses [31:0] $end
$var reg 32 Y cpu_rdata [31:0] $end
$var reg 2 Z fill_counter [1:0] $end
$var reg 1 [ hit_way $end
$var reg 16 \ lfsr [15:0] $end
$var reg 32 ] lfu_replacements [31:0] $end
$var reg 32 ^ lru_replacements [31:0] $end
$var reg 32 _ mem_addr [31:0] $end
$var reg 4 ` mem_byte_en [3:0] $end
$var reg 1 ) mem_req $end
$var reg 32 a mem_wdata [31:0] $end
$var reg 1 ' mem_write $end
$var reg 3 b miss_index [2:0] $end
$var reg 25 c miss_tag [24:0] $end
$var reg 2 d miss_word_offset [1:0] $end
$var reg 3 e next_state [2:0] $end
$var reg 32 f random_replacements [31:0] $end
$var reg 1 g replace_way $end
$var reg 32 h rr_replacements [31:0] $end
$var reg 32 i selected_word [31:0] $end
$var reg 3 j state [2:0] $end
$var reg 32 k write_data_masked [31:0] $end
$var reg 2 l writeback_counter [1:0] $end
$var reg 3 m writeback_index [2:0] $end
$var reg 25 n writeback_tag [24:0] $end
$var reg 1 o writeback_way $end
$scope function get_lfu_way $end
$var reg 1 p lfu_way $end
$var reg 8 q min_count [7:0] $end
$var reg 3 r set_index [2:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 s i [31:0] $end
$upscope $end
$upscope $end
$scope function get_lru_way $end
$var reg 1 t lru_way $end
$var reg 1 u max_order $end
$var reg 3 v set_index [2:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 w i [31:0] $end
$upscope $end
$upscope $end
$scope function get_random_way $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 x i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 y i [31:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 z j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop5 $end
$var integer 32 { i [31:0] $end
$scope begin $ivl_for_loop6 $end
$var integer 32 | j [31:0] $end
$upscope $end
$upscope $end
$scope task update_lru $end
$var reg 1 } accessed_way $end
$var reg 3 ~ set_idx [2:0] $end
$scope begin $ivl_for_loop7 $end
$var integer 32 !" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module u_perf_monitor $end
$var wire 1 6 clk $end
$var wire 32 "" coherency_addr [31:0] $end
$var wire 1 #" coherency_conflict $end
$var wire 1 $" coherency_invalidation $end
$var wire 1 %" coherency_overflow $end
$var wire 32 &" coherency_total_conflicts [31:0] $end
$var wire 32 '" coherency_total_invalidations [31:0] $end
$var wire 1 / counters_overflow $end
$var wire 1 (" dcache_access $end
$var wire 32 )" dcache_addr [31:0] $end
$var wire 1 *" dcache_eviction $end
$var wire 1 +" dcache_fill $end
$var wire 1 . dcache_hit $end
$var wire 1 ," dcache_miss $end
$var wire 1 -" dcache_overflow $end
$var wire 32 ." dcache_total_accesses [31:0] $end
$var wire 32 /" dcache_total_evictions [31:0] $end
$var wire 32 0" dcache_total_hits [31:0] $end
$var wire 32 1" dcache_total_misses [31:0] $end
$var wire 32 2" dcache_total_writebacks [31:0] $end
$var wire 32 3" dcache_total_writes [31:0] $end
$var wire 1 4" dcache_write $end
$var wire 1 5" dcache_writeback $end
$var wire 1 6" icache_access $end
$var wire 32 7" icache_addr [31:0] $end
$var wire 1 8" icache_eviction $end
$var wire 1 9" icache_fill $end
$var wire 1 :" icache_hit $end
$var wire 1 ;" icache_miss $end
$var wire 1 <" icache_overflow $end
$var wire 32 =" icache_total_accesses [31:0] $end
$var wire 32 >" icache_total_evictions [31:0] $end
$var wire 32 ?" icache_total_hits [31:0] $end
$var wire 32 @" icache_total_misses [31:0] $end
$var wire 1 A" mmu_asid_switch $end
$var wire 1 B" mmu_overflow $end
$var wire 1 C" mmu_page_fault $end
$var wire 1 D" mmu_tlb_access $end
$var wire 1 E" mmu_tlb_hit $end
$var wire 1 F" mmu_tlb_miss $end
$var wire 32 G" mmu_total_accesses [31:0] $end
$var wire 32 H" mmu_total_asid_switches [31:0] $end
$var wire 32 I" mmu_total_hits [31:0] $end
$var wire 32 J" mmu_total_misses [31:0] $end
$var wire 32 K" mmu_total_page_faults [31:0] $end
$var wire 1 & monitor_active $end
$var wire 1 ? perf_enable $end
$var wire 1 @ perf_reset $end
$var wire 4 L" perf_sample_period [3:0] $end
$var wire 1 C rst_n $end
$var wire 32 M" weighted_hits [31:0] $end
$var wire 32 N" total_memory_accesses [31:0] $end
$var reg 32 O" cache_efficiency_metric [31:0] $end
$var reg 1 P" coherency_conflict_prev $end
$var reg 32 Q" coherency_conflicts [31:0] $end
$var reg 1 R" coherency_invalidation_prev $end
$var reg 32 S" coherency_invalidations [31:0] $end
$var reg 1 T" dcache_access_prev $end
$var reg 32 U" dcache_accesses [31:0] $end
$var reg 1 V" dcache_eviction_prev $end
$var reg 32 W" dcache_evictions [31:0] $end
$var reg 1 X" dcache_hit_prev $end
$var reg 32 Y" dcache_hit_rate_calc [31:0] $end
$var reg 16 Z" dcache_hit_rate_percent [15:0] $end
$var reg 32 [" dcache_hits [31:0] $end
$var reg 1 \" dcache_miss_prev $end
$var reg 32 ]" dcache_misses [31:0] $end
$var reg 1 ^" dcache_write_prev $end
$var reg 1 _" dcache_writeback_prev $end
$var reg 32 `" dcache_writebacks [31:0] $end
$var reg 32 a" dcache_writes [31:0] $end
$var reg 1 b" icache_access_prev $end
$var reg 32 c" icache_accesses [31:0] $end
$var reg 1 d" icache_eviction_prev $end
$var reg 32 e" icache_evictions [31:0] $end
$var reg 1 f" icache_hit_prev $end
$var reg 32 g" icache_hit_rate_calc [31:0] $end
$var reg 16 h" icache_hit_rate_percent [15:0] $end
$var reg 32 i" icache_hits [31:0] $end
$var reg 1 j" icache_miss_prev $end
$var reg 32 k" icache_misses [31:0] $end
$var reg 32 l" mmu_accesses [31:0] $end
$var reg 1 m" mmu_asid_switch_prev $end
$var reg 32 n" mmu_asid_switches [31:0] $end
$var reg 32 o" mmu_hit_rate_calc [31:0] $end
$var reg 16 p" mmu_hit_rate_percent [15:0] $end
$var reg 32 q" mmu_hits [31:0] $end
$var reg 32 r" mmu_misses [31:0] $end
$var reg 1 s" mmu_page_fault_prev $end
$var reg 32 t" mmu_page_faults [31:0] $end
$var reg 1 u" mmu_tlb_access_prev $end
$var reg 1 v" mmu_tlb_hit_prev $end
$var reg 1 w" mmu_tlb_miss_prev $end
$var reg 32 x" sample_counter [31:0] $end
$var reg 1 y" sample_tick $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 z" i [31:0] $end
$upscope $end
$scope task cache_access $end
$var reg 32 {" addr [31:0] $end
$var reg 32 |" wdata [31:0] $end
$var reg 1 }" write $end
$upscope $end
$scope task test_cache_performance_tracking $end
$scope begin $ivl_for_loop10 $end
$var integer 32 ~" i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop11 $end
$var integer 32 !# i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop9 $end
$var integer 32 "# i [31:0] $end
$upscope $end
$upscope $end
$scope task test_replacement_policy_performance $end
$var reg 16 ## lru_hit_rate [15:0] $end
$var reg 16 $# rr_hit_rate [15:0] $end
$scope begin $ivl_for_loop12 $end
$var integer 32 %# i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop13 $end
$var integer 32 &# i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 &#
b0 %#
bx $#
bx ##
b0 "#
b0 !#
b0 ~"
x}"
bx |"
bx {"
b100000000000000 z"
0y"
b0 x"
0w"
0v"
0u"
b0 t"
0s"
b0 r"
b0 q"
b0 p"
bx o"
b0 n"
0m"
b0 l"
b0 k"
0j"
b0 i"
b0 h"
bx g"
0f"
b0 e"
0d"
b0 c"
0b"
b0 a"
b0 `"
0_"
0^"
b0 ]"
0\"
b0 ["
b0 Z"
bx Y"
0X"
b0 W"
0V"
b0 U"
0T"
b0 S"
0R"
b0 Q"
0P"
b0 O"
b0 N"
b0 M"
b100 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
0F"
0E"
0D"
0C"
0B"
0A"
b0 @"
b0 ?"
b0 >"
b0 ="
0<"
0;"
0:"
09"
08"
b0 7"
06"
05"
04"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
0-"
0,"
0+"
0*"
b0 )"
0("
b0 '"
b0 &"
0%"
0$"
0#"
b0 ""
b0 !"
bx ~
x}
b0 |
b0 {
b10 z
b1000 y
b10 x
b0 w
b0 v
0u
0t
b0 s
bx r
b11111111 q
0p
xo
bx n
bx m
b0 l
b0 k
b0 j
b0 i
b0 h
0g
b0 f
b0 e
bx d
bx c
bx b
b0 a
b1111 `
b0 _
b0 ^
b0 ]
b1010110011100001 \
0[
b0 Z
b0 Y
b0 X
b0 W
0V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b10 L
b1111 K
b0 J
0I
0H
0G
b0 F
b0 E
b0 D
0C
b0 B
b100 A
0@
1?
1>
b0 =
0<
b0 ;
b10 :
09
b1111 8
b0 7
06
05
14
03
b0 2
b0 1
b0 0
0/
0.
b0 -
0,
b0 +
b1111 *
0)
b0 (
0'
1&
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#5000
b10 z
b1000 y
16
#10000
06
#15000
b10 z
b1000 y
16
#20000
06
#25000
b10 z
b1000 y
16
#30000
06
#35000
b10 z
b1000 y
16
#40000
06
#45000
b10 x
b1 x"
b101100111000011 \
1C
16
#50000
06
#55000
b10 x
b1011001110000111 \
b10 x"
16
#60000
06
#65000
b10 x
b11 x"
b110011100001111 \
16
#70000
06
#75000
b10 x
b1100111000011110 \
b100 x"
16
#80000
06
#85000
b10 x
b101 x"
b1001110000111100 \
16
#90000
06
#95000
b10 x
b11100001111001 \
b110 x"
16
#100000
06
#105000
b10 x
b111 x"
b111000011110010 \
16
#110000
06
#115000
b10 x
b1110000111100100 \
b1000 x"
16
#120000
06
#125000
b10 x
b1001 x"
b1100001111001000 \
16
#130000
06
#135000
b10 x
b1000011110010001 \
b1010 x"
16
#140000
06
#145000
b10 x
b1011 x"
b111100100010 \
1@
b1 D
16
#150000
06
#155000
b10 x
b1111001000101 \
b1100 x"
0@
16
#160000
06
#165000
b1101 x"
b11110010001010 \
b10 x
b1000 {
b10 |
15
16
#170000
06
#175000
b111100100010101 \
b1110 x"
b10 x
05
16
#180000
06
#185000
b1111 x"
b1111001000101010 \
1("
b10 x
b1 e
b1000000000000 +
b1000000000000 _
b100000 R
19
b1000000000000 F
b1000000000000 7
b1000000000000 J
b1000000000000 )"
b0 |"
0}"
b1000000000000 {"
16
#190000
06
#195000
b10 x
b11 e
13
b1110010001010101 \
1y"
b0 x"
1T"
b1 N"
b1 #
b1 ."
b1 U"
b1 j
16
#200000
06
#205000
1+"
1)
b10 x
b1 ^
b0 d
b0 b
b100000 c
b1 0
b1 X
b11 j
0y"
b1 x"
b1100100010101011 \
b0 Y"
16
#210000
06
#215000
b1000000000100 +
b1000000000100 _
1)
b10 x
b1001000101010111 \
b10 x"
b11001010111111100000010000000000 =
b11001010111111100000010000000000 N
b1 Z
16
#220000
06
#225000
b1000000001000 +
b1000000001000 _
1)
b10 x
b10 Z
b11001010111111100000010000000001 =
b11001010111111100000010000000001 N
b11 x"
b10001010101110 \
16
#230000
06
#235000
b100 e
b1000000001100 +
b1000000001100 _
1)
b10 x
b100010101011101 \
b100 x"
b11001010111111100000010000000010 =
b11001010111111100000010000000010 N
b11 Z
16
#240000
06
#245000
1,"
0+"
1G
1,
03
b0 e
b1000000000000 +
b1000000000000 _
0)
1V
b10 x
1g
b1 w
b0 Z
b100 j
b11001010111111100000010000000011 =
b11001010111111100000010000000011 N
b101 x"
b10001010